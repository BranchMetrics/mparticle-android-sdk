ext {
    kitDescription = 'Core mParticle SDK supporting only server-side integrations.'
}

apply plugin: 'com.android.library'
apply from: '../scripts/maven.gradle'

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.2"
    packagingOptions {
        exclude 'META-INF/LICENSE'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_6
        targetCompatibility JavaVersion.VERSION_1_6
    }

    sourceSets {
        String sharedTestDir = 'src/sharedTest/java'
        test {
            java.srcDir sharedTestDir
        }
        androidTest {
            java.srcDir sharedTestDir
        }
    }

    String url = "\"\"";
    String identityUrl = "\"\""
    String configurationUrl = "\"\"";
    try {
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        if (properties.stringPropertyNames().contains('mp.url')) {
            url = properties.getProperty('mp.url')
        }
        if (properties.stringPropertyNames().contains('mp.identityurl')) {
            identityUrl = properties.getProperty('mp.identityurl');
        }
        if (properties.stringPropertyNames().contains('mp.configurl')) {
            configurationUrl = properties.getProperty('mp.configurl')
        }
    } catch (Exception e) {

    }

    def gitHash = "git rev-parse --short HEAD".execute().text.trim()

    if (gitHash == null || gitHash.length() == 0) {
        gitHash = System.getenv("MP_GIT_SHA").substring(0, 7)
    }
    
    testBuildType obtainTestBuildType()

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 26
        versionName project.version.toString().replace("-SNAPSHOT", "")
        versionCode Integer.parseInt(new Date().format('yyyyMMdd'))

        buildConfigField "String", "GIT_SHA", "\"$gitHash\""
        buildConfigField "String", "MP_URL", url
        buildConfigField "String", "MP_IDENTITY_URL", identityUrl
        buildConfigField "String", "MP_CONFIG_URL", configurationUrl
        buildConfigField "Boolean", "MP_DEBUG", "false"
        buildConfigField "String", "SCHEMA", "\"https\""

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            minifyEnabled false
            buildConfigField "Boolean", "MP_DEBUG", "true"
            multiDexEnabled true
        }
        release {
            minifyEnabled true
            proguardFiles 'proguard.pro'

            consumerProguardFiles 'consumer-proguard.pro'
//            buildConfigField "Boolean", "MP_DEBUG", "true"
        }
        instrumented {
            minifyEnabled false
            debuggable true
            buildConfigField "String", "MP_URL", "\"localhost:8080\""
            buildConfigField "String", "MP_CONFIG_URL", "\"localhost:8080\""
            buildConfigField "String", "MP_IDENTITY_URL", "\"localhost:8080\""
            buildConfigField "String", "SCHEMA", "\"http\""
            buildConfigField "Boolean", "MP_DEBUG", "false"
            signingConfig signingConfigs.debug
            multiDexEnabled true
        }
    }
}

task coreSdkJavadocs(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        source += 'build/generated/source/buildConfig/release/'
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        title = 'mParticle Android SDK API Reference'
        failOnError false
        exclude {
            String filePath = it.toString()
            filePath.contains('/com/mparticle/internal/') ||
                    filePath.contains('/com/mparticle/kits/')
        }
        getOptions().setNoTimestamp(true)
}

dependencies {
    compileOnly 'com.google.android.gms:play-services-gcm:[7.0,)'
    compileOnly 'com.google.android.gms:play-services-ads:[7.0,)'
    compileOnly 'com.google.firebase:firebase-messaging:[7.0,)'
    compileOnly 'com.android.support:support-v4:[26.0, )'
    compileOnly 'com.android.installreferrer:installreferrer:[1.0, )'
    compileOnly 'com.google.android.instantapps:instantapps:[1.0, )'

    testImplementation 'junit:junit:4.12'
    testImplementation  files('libs/java-json.jar')
    testImplementation 'org.powermock:powermock-module-junit4:1.6.2'
    testImplementation 'org.powermock:powermock-api-mockito:1.6.2'
    testImplementation 'org.powermock:powermock-core:1.6.2'
    testImplementation 'com.android.support:support-v4:26.0+'
    androidTestImplementation 'com.android.installreferrer:installreferrer:1.0'
    androidTestImplementation 'com.android.support:support-annotations:24.0.0'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test:rules:1.0.1'
    androidTestImplementation 'org.apache.httpcomponents:httpclient-android:4.3.5.1'
    androidTestImplementation 'org.slf4j:slf4j-api:1.7.12'
    androidTestImplementation('org.mockito:mockito-core:1+'){
        exclude group: 'junit' exclude group: 'org.hamcrest', module: 'hamcrest-core'
    }
    androidTestImplementation("com.github.tomakehurst:wiremock:2.8.0") {

        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
        exclude group: 'org.slf4j', module: 'slf4j-api'
        exclude group: 'org.ow2.asm', module: 'asm'
        exclude group: 'org.json', module: 'json'
    }
    androidTestImplementation 'org.hamcrest:hamcrest-library:1.3'
}

configurations {
    lintJarImport
}

dependencies {
    lintJarImport project(path: ":custom-lint-rules", configuration: "lintChecks")
}


task copyLintJar(type: Copy) {

    from(configurations.lintJarImport) {
        rename {
            String fileName ->
                'lint.jar'
        }
    }
    into 'build/intermediates/lint/'
}


project.afterEvaluate {
    def compileLintTask = project.tasks.find { it.name == 'compileLint' }
    compileLintTask.dependsOn(copyLintJar)
}


def obtainTestBuildType() {
    def result = "instrumented";

    if (project.hasProperty("testBuildType")) {
        result = project.getProperties().get("testBuildType")
    }

    result
}
